name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

concurrency:
  group: deploy-${{ github.ref }}-${{ inputs.environment || 'staging' }}
  cancel-in-progress: false

jobs:
  # Determine deployment environment
  setup:
    name: Setup Deployment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      should-deploy-web: ${{ steps.changes.outputs.web }}
      should-deploy-api: ${{ steps.changes.outputs.api }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

      - name: Check for changes
        id: changes
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -E '^web/|^shared/' > /dev/null; then
            echo "web=true" >> $GITHUB_OUTPUT
          else
            echo "web=false" >> $GITHUB_OUTPUT
          fi

          if git diff --name-only HEAD~1 HEAD | grep -E '^api/|^shared/' > /dev/null; then
            echo "api=true" >> $GITHUB_OUTPUT
          else
            echo "api=false" >> $GITHUB_OUTPUT
          fi

  # Build and deploy web app
  deploy-web:
    name: Deploy Web App
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.should-deploy-web == 'true'
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run install:web

      - name: Build web app
        run: npm run build --workspace=web
        env:
          NODE_ENV: production

      - name: Deploy to Vercel (Staging)
        if: needs.setup.outputs.environment == 'staging'
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./web
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Deploy to Vercel (Production)
        if: needs.setup.outputs.environment == 'production'
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./web
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}

  # Deploy API to Railway
  deploy-api:
    name: Deploy API to Railway
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.should-deploy-api == 'true'
    environment: ${{ needs.setup.outputs.environment }}
    defaults:
      run:
        working-directory: ./api
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install UV
        run: pip install uv

      - name: Install dependencies
        run: uv sync

      - name: Run tests
        run: uv run pytest

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy to Railway (Staging)
        if: needs.setup.outputs.environment == 'staging'
        run: |
          railway deploy --service nuge-api-staging
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Deploy to Railway (Production)
        if: needs.setup.outputs.environment == 'production'
        run: |
          railway deploy --service nuge-api-production
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

  # Run tests against staging environment
  staging-tests:
    name: Test Staging Deployment
    runs-on: ubuntu-latest
    needs: [setup, deploy-web, deploy-api]
    if: needs.setup.outputs.environment == 'staging' && (needs.deploy-web.result == 'success' || needs.deploy-api.result == 'success')
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run install:web

      - name: Wait for deployments to be ready
        run: |
          echo "⏳ Waiting for deployments to be fully ready..."
          sleep 30

      - name: Test API Health
        run: |
          echo "🔍 Testing API health endpoint..."
          if curl -f -s "${{ secrets.STAGING_API_URL }}/health" > /dev/null; then
            echo "✅ API health check passed"
          else
            echo "❌ API health check failed"
            exit 1
          fi

      - name: Test Web App
        run: |
          echo "🔍 Testing web app accessibility..."
          if curl -f -s "${{ secrets.STAGING_WEB_URL }}" > /dev/null; then
            echo "✅ Web app is accessible"
          else
            echo "❌ Web app is not accessible"
            exit 1
          fi

      - name: Run API Integration Tests
        working-directory: ./api
        run: |
          echo "🧪 Running integration tests against staging API..."
          # Add your integration test commands here
          # Example: uv run pytest tests/integration/ --base-url=${{ secrets.STAGING_API_URL }}
          echo "✅ Integration tests would run here"

      - name: Test Supabase Connection
        run: |
          echo "🔍 Testing Supabase connection..."
          # Add Supabase connection test
          echo "✅ Database connection test would run here"

    # Deployment summary
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [setup, deploy-web, deploy-api, staging-tests]
    if: always()
    steps:
      - name: Create deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.setup.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Components Deployed:" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.setup.outputs.should-deploy-web }}" == "true" ]]; then
            if [[ "${{ needs.deploy-web.result }}" == "success" ]]; then
              echo "- ✅ **Web App (Vercel)**: Successfully deployed" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ❌ **Web App (Vercel)**: Deployment failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- ⏭️ **Web App**: No changes, skipped" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.setup.outputs.should-deploy-api }}" == "true" ]]; then
            if [[ "${{ needs.deploy-api.result }}" == "success" ]]; then
              echo "- ✅ **API (Railway)**: Successfully deployed" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ❌ **API (Railway)**: Deployment failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- ⏭️ **API**: No changes, skipped" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.setup.outputs.environment }}" == "staging" ]]; then
            if [[ "${{ needs.staging-tests.result }}" == "success" ]]; then
              echo "- ✅ **Staging Tests**: All tests passed" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "🎉 **Staging deployment successful!** You can now trigger production deployment manually." >> $GITHUB_STEP_SUMMARY
            else
              echo "- ❌ **Staging Tests**: Tests failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- 🚀 **Production Deployment**: Completed" >> $GITHUB_STEP_SUMMARY
          fi
