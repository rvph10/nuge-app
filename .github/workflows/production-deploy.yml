name: Production Deploy

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "DEPLOY" to confirm production deployment'
        required: true
        type: string
      staging_run_id:
        description: 'Staging workflow run ID (optional - for verification)'
        required: false
        type: string

concurrency:
  group: production-deploy
  cancel-in-progress: false

jobs:
  # Verify deployment confirmation
  verify:
    name: Verify Production Deployment
    runs-on: ubuntu-latest
    outputs:
      confirmed: ${{ steps.check.outputs.confirmed }}
    steps:
      - name: Check confirmation
        id: check
        run: |
          if [[ "${{ inputs.confirm }}" == "DEPLOY" ]]; then
            echo "confirmed=true" >> $GITHUB_OUTPUT
            echo "✅ Production deployment confirmed"
          else
            echo "confirmed=false" >> $GITHUB_OUTPUT
            echo "❌ Production deployment not confirmed. Please type 'DEPLOY' to confirm."
            exit 1
          fi

      - name: Log deployment details
        run: |
          echo "## 🚀 Production Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deploying to:** Production" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Time:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          if [[ -n "${{ inputs.staging_run_id }}" ]]; then
            echo "**Staging Run ID:** ${{ inputs.staging_run_id }}" >> $GITHUB_STEP_SUMMARY
          fi

  # Deploy web app to production
  deploy-web-prod:
    name: Deploy Web App (Production)
    runs-on: ubuntu-latest
    needs: verify
    if: needs.verify.outputs.confirmed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run install:web

      - name: Build web app
        run: npm run build --workspace=web
        env:
          NODE_ENV: production

      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./web
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}

  # Deploy API to production
  deploy-api-prod:
    name: Deploy API (Production)
    runs-on: ubuntu-latest
    needs: verify
    if: needs.verify.outputs.confirmed == 'true'
    defaults:
      run:
        working-directory: ./api
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install UV
        run: pip install uv

      - name: Install dependencies
        run: uv sync

      - name: Run tests
        run: uv run pytest

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy to Railway (Production)
        run: |
          railway deploy --service nuge-api-production
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

  # Run production smoke tests
  production-tests:
    name: Production Smoke Tests
    runs-on: ubuntu-latest
    needs: [verify, deploy-web-prod, deploy-api-prod]
    if: needs.verify.outputs.confirmed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for deployments to be ready
        run: |
          echo "⏳ Waiting for production deployments to be fully ready..."
          sleep 60

      - name: Test Production API Health
        run: |
          echo "🔍 Testing production API health endpoint..."
          if curl -f -s "${{ secrets.PRODUCTION_API_URL }}/health" > /dev/null; then
            echo "✅ Production API health check passed"
          else
            echo "❌ Production API health check failed"
            exit 1
          fi

      - name: Test Production Web App
        run: |
          echo "🔍 Testing production web app accessibility..."
          if curl -f -s "${{ secrets.PRODUCTION_WEB_URL }}" > /dev/null; then
            echo "✅ Production web app is accessible"
          else
            echo "❌ Production web app is not accessible"
            exit 1
          fi

      - name: Test Critical API Endpoints
        run: |
          echo "🧪 Testing critical production API endpoints..."
          # Add critical endpoint tests here
          echo "✅ Critical endpoint tests would run here"

  # Production deployment summary
  production-summary:
    name: Production Deployment Summary
    runs-on: ubuntu-latest
    needs: [verify, deploy-web-prod, deploy-api-prod, production-tests]
    if: always() && needs.verify.outputs.confirmed == 'true'
    steps:
      - name: Create production deployment summary
        run: |
          echo "## 🎉 Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Production" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment time:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Results:" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.deploy-web-prod.result }}" == "success" ]]; then
            echo "- ✅ **Web App (Vercel)**: Successfully deployed to production" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ **Web App (Vercel)**: Production deployment failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.deploy-api-prod.result }}" == "success" ]]; then
            echo "- ✅ **API (Railway)**: Successfully deployed to production" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ **API (Railway)**: Production deployment failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.production-tests.result }}" == "success" ]]; then
            echo "- ✅ **Production Tests**: All smoke tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ **Production Tests**: Some tests failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.deploy-web-prod.result }}" == "success" && "${{ needs.deploy-api-prod.result }}" == "success" && "${{ needs.production-tests.result }}" == "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🚀 **Production deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Live URLs:**" >> $GITHUB_STEP_SUMMARY
            echo "- Web App: ${{ secrets.PRODUCTION_WEB_URL }}" >> $GITHUB_STEP_SUMMARY
            echo "- API: ${{ secrets.PRODUCTION_API_URL }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Production deployment had issues. Please check the logs above.**" >> $GITHUB_STEP_SUMMARY
          fi
